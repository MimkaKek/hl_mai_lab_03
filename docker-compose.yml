version: '3.7'
services:
  arch_users:
    tty: true
    container_name: arch_users
    build:
      context: .
      dockerfile: my_service/release
    #   dockerfile: my_service/debug
    # volumes:
    #   - .:/app/
    environment:
      - DB_HOST=postgers_db
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - MONGO_HOST=mongo_db
      - MONGO_PORT=27017
      - MONGO_DATABASE=archdb
      - USER_SERVICE_HOST=arch_users
      - USER_SERVICE_PORT=8080
      - PARTY_SERVICE_HOST=arch_parties
      - PARTY_SERVICE_PORT=8082
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8080:8080
    networks:
      - arch-network

  arch_trips:
    tty: true
    container_name: arch_trips
    build:
      context: .
      dockerfile: my_service/release
    #   dockerfile: my_service/debug
    # volumes:
    #   - .:/app/
    environment:
      - DB_HOST=postgers_db
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - MONGO_HOST=mongo_db
      - MONGO_PORT=27017
      - MONGO_DATABASE=archdb
      - USER_SERVICE_HOST=arch_users
      - USER_SERVICE_PORT=8080
      - PARTY_SERVICE_HOST=arch_parties
      - PARTY_SERVICE_PORT=8082
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8081:8080
    networks:
      - arch-network

  arch_parties:
    tty: true
    container_name: arch_parties
    build:
      context: .
      dockerfile: my_service/release
    #   dockerfile: my_service/debug
    # volumes:
    #   - .:/app/
    environment:
      - DB_HOST=postgers_db
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - MONGO_HOST=mongo_db
      - MONGO_PORT=27017
      - MONGO_DATABASE=archdb
      - USER_SERVICE_HOST=arch_users
      - USER_SERVICE_PORT=8080
      - PARTY_SERVICE_HOST=arch_parties
      - PARTY_SERVICE_PORT=8082
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8082:8080
    networks:
      - arch-network

  arch_paths:
    tty: true
    container_name: arch_paths
    build:
      context: .
      dockerfile: my_service/release
    #   dockerfile: my_service/debug
    # volumes:
    #   - .:/app/
    environment:
      - DB_HOST=postgers_db
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - MONGO_HOST=mongo_db
      - MONGO_PORT=27017
      - MONGO_DATABASE=archdb
      - USER_SERVICE_HOST=arch_users
      - USER_SERVICE_PORT=8080
      - PARTY_SERVICE_HOST=arch_parties
      - PARTY_SERVICE_PORT=8082
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8083:8080
    networks:
      - arch-network

  db:
    container_name: postgers_db
    image: postgres:15
    environment:
      - POSTGRES_USER=stud
      - POSTGRES_PASSWORD=stud
      - PGDATA=/data/postgres
      - POSTGRES_DB=archdb
    volumes:
      - db:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - arch-network
  
  mongo:
    image: mongo:5.0
    container_name: mongo_db
    restart: on-failure
    networks:
      - arch-network
    volumes:
      - mongodbdata:/data/db
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

volumes:
  db:
  cache:
  mongodbdata:

networks:
  arch-network:
    driver: "bridge"
    external: false